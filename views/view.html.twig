{% extends "layout.html.twig" %}

{% block body %}
    <div class="mb-3">
        <button id="retrieve-message" class="btn btn-primary m-auto d-block mt-5">Retrieve Message</button>
        <textarea id="plaintext" class="form-control d-none" rows="10"></textarea>
    </div>
    <div class="mb-3 alert alert-danger d-none" id="error" aria-hidden="true"></div>

{% endblock %}

{% block scripts %}
    <script>
        // https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String
        const unpack = (packed) => {
            const string = window.atob(packed)
            const buffer = new ArrayBuffer(string.length)
            const bufferView = new Uint8Array(buffer)
            for (let i = 0; i < string.length; i++) {
                bufferView[i] = string.charCodeAt(i)
            }
            return buffer
        }

        // https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder
        const decode = (bytestream) => {
            const decoder = new TextDecoder()
            return decoder.decode(bytestream)
        }

        const set_error = (message = '') => {
            const e = document.getElementById('error');
            e.innerText = message;
            e.classList.toggle('d-none', !message)
            e.ariaHidden = message ? 'false':'true';
        }

        document.getElementById('retrieve-message').addEventListener('click', (e) => {
            e.target.classList.toggle('d-none', true);

            if (!window.location.hash) {
                set_error('Invalid URL');
                return;
            }

            const data = new URLSearchParams(window.location.hash.substring(1));

            // Ensure we have both the link and the key in the fragment
            if (!data.has('key')) {
                set_error('Missing URL data');
                return;
            }

            // Fetch the iv and ciphertext from the server
            fetch('{{ url_for('retrieve', {'link': link}) }}')
                .then(response => response.json())
                .then(response => {
                    if (response.iv && response.ciphertext) {
                        window.crypto.subtle.importKey(
                            'raw',
                            unpack(data.get('key')),
                            {
                                name: "AES-GCM",
                                length: 256,
                            },
                            false,
                            ["encrypt", "decrypt"]
                        ).then(key => {
                            const unpacked_ciphertext = unpack(response.ciphertext);

                            return window.crypto.subtle.decrypt(
                                {
                                    name: 'AES-GCM',
                                    iv: unpack(response.iv),
                                },
                                key,
                                unpacked_ciphertext
                            );
                        }).then(decrypted => {
                            const plaintext = document.getElementById('plaintext');
                            plaintext.value = decode(decrypted);
                            plaintext.classList.toggle('d-none', false);
                        });
                    } else {
                        set_error(response.error);
                    }
                });
        });
    </script>
{% endblock %}
